openapi: 3.0.3
info:
  title: CV Auth Service API
  description: API for Authentication Service that provides login functionality and returns JWT tokens.
  version: 1.0.0
  contact:
    name: Support Team
    email: support@chavdarvishranti.com
servers:
  - url: http://localhost:8063/cv-auth
    description: Local server
  # - url: http://103.168.18.176:8063
  #   description: Production server

paths:
  /auth/login:
    post:
      summary: Login and get JWT token
      description: Authenticate the user with username and password, and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user with username, password, and email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          example: "sharad@example.com"
        password:
          type: string
          example: "password123"
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9..."
      required:
        - token

    AuthRegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: "sharad@example.com"
        password:
          type: string
          example: "password123"
        name:
          type: string
          example: "sharad"
        mobile:
          type: string
          example: "0987654321"
        userRole:
          type: string
          enum:
            - ADMIN
            - OWNER
          example: ADMIN
      required:
        - username
        - password
        - userRole

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"
        data:
          type: object
          x-java-type: Object
        timestamp:
          type: string
          format: date-time
          example: "2024-09-14T15:00:00Z"
      required:
        - message
        - timestamp
      description: |
        This schema represents a successful API response. 
        **Constructor**:
        ```
        public SuccessResponse(String message, Object data) {
            this.message = message;
            this.data = data;
            this.timestamp = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);
        }
        ```

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid input format"
        timestamp:
          type: string
          format: date-time
          example: "2024-09-14T15:00:00Z"
        status:
          type: integer
          example: 400
      required:
        - message
        - timestamp
        - status

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication related endpoints
